-- day15

/*
    WITH ADMIN OPTION
        ==> 권한을 줄때 관리자 권한 까지 주는 옵션
        
    -- system 계정으로 접속해서
    GRANT SELECT ANY TABLE TO hello WITH ADMIN OPTION;
    
    ------------------------------------------------------------------------------
    
    3. 특정 계정의 테이블을 조회할 수 있는 권한
        ==> 원칙적으로 하나의 계정은 그 계정에 존재하는 테이블만 사용할 수 있다.
        
            하지만 여러계정들이 다른 계정의 테이블을 공동으로 사용할 수 잇다.
            이렇게 사용하려면 권한을 설정 해줘야 한다.
            
            형식 ]
                GRANT 권한이름 ON   계정이름.테이블이름 TO   계정이름;
                
    ------------------------------------------------------------------------------
    -- SYSTEM 계정으로 접속해서 작업
    
        GRANT select, update, delete ON hr.employees TO hello;
    ------------------------------------------------------------------------------
    
    4. 관리자에게서 부여받은 권한을 다른 계정에게 전파하기
        
        형식 ]
            GRANT   권한  TO      계정이름
            WITH GRANT OPTION;
            
    ------------------------------------------------------------------------------
    -- SYSTEM 계정으로 접속해서 작업
    
        GRANT select ON hr.employees TO hello
        WITH GRANT OPTION
        ;
    ------------------------------------------------------------------------------
    hello 계정에서
    
        GRANT select ON hr.employees TO test01;
    
    -------------------------------------------------------------------------------
    test01로 접속후 실행
        SELECT * FROM hr.emplyees;
    
    ==> 107행의 결과가 조회
    
------------------------------------------------------------------------------------
    사용자 권한 수정하기
        
        GRANT 명령을 이용해서 필요한 권한을 관리자가 부여해주면 된다.
        
------------------------------------------------------------------------------------
    사용자 권한 회수하기
        
        형식 ]
            
            REVOKE  회수할권한    FROM    계정이름;
            
-------------------------------------------------------------------------------------
    
    사용자 삭제하기
    ==> 
        관리자 계정으로 접속해서
        
        DROP USER   계정이름    CASCADE;
        
--------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------
롤을 이용한 사용자 권한 부여
==> 
    롤 이란?
        여러권한들을 묶어놓은 객체(권한들의 묶음)를 의미하는 용어
    
        따라서 롤을 사용한 권한 부여란?
        여러개의 권한을 동시에 부여하는 방법이다.
        
    1. 이미 만들어져 있는 롤을 이용하는 방법
        1) CONNECT
            ==> 데이터베이스 접속과 주로 CREATE와 관련된 권한을 모아 놓은 롤
            
        2) RESOUCE
            ==> 사용자 객체 생성에 권한을 모아 놓은 롤
            
        3) DBA
            ==> 관리자 계정에서 처리할 수 있는 관리자 권한을 모아 놓은 롤
            
            
        형식 ]
            
            GRANT 롤이름, 롤이름, ... TO  계정이름;
            
            참고 ]
                일반 권한들과 같이 나열해서 부여할 수 있다.
        
    2. 직접 만들어서 사용하는 방법
        ==> 롤 안에 필요한 권한을 사용자가 지정한 후 사용하는 방법
        
        형식 ]
            
            *****
            만드는 단계를 기억해주자.
            
                1. 롤을 만든다.
                    형식 ]
                        CREATE ROLE 롤이름;
                        
                2. 롤에다 권한을 부여한다.
                    형식 ]
                        GRANT    권한이름, 권한이름, ... TO 롤이름;
                
                3. 계정에게 권한을 부여할 때 롤로 부여한다.
                    형식 ]
                        
                        GRANT 롤이름   TO  계정이름;
                        
-----------------------------------------------------------------------------------------
실습과정 ]
    
    1. SYSTEM(관리자계정) 으로 접속해서
        
        DROP USER test01 CASCADE;
        DROP USER testuser CASCADE;
        
    2. test01 계정을 다시 만든다.
        
        CREATE USER test01 IDENTIFIED BY increpas;
        
    3. rl01 이라는 롤을 만든다.
        
        CREATE ROLE rl01;
        
    4. rl01 롤에 resource, connect, select any table 권한을 부여한다.
        
        GRANT resource, connect, select any table TO rl01;
        
    5. test01 계정에게 rl01 롤 권한을 부여한다.
        
        GRANT rl01 TO test01;
        
    6. test01 계정으로 접속해서
    
        conn test01/increpas
        
        SELECT * FROM hello.emp;


-----------------------------------------------------------------------------------------
    롤 회수하기
        형식 ]
            REVOKE  롤이름     FROM    계정이름;
        
-----------------------------------------------------------------------------------------
    롤 삭제하기
        
        형식 ]
            DROP ROLE 롤이름;
*/

GRANT UPDATE ANY TABLE, DELETE ANY TABLE TO hello;

GRANT SELECT ANY TABLE TO testuser;

REVOKE SELECT ANY TABLE FROM testuser; -- 권한 회수 명령
------------------------------------------------------------------------------
REVOKE SELECT ANY TABLE FROM hello;

-- 권한 확인
SELECT
    *
FROM
    hr.employees
;

GRANT select ON hr.employees TO testuser;

---------------------------------------------------------------------------------
/*
    동의어( SYNONYM )
    ==> 테이블 자체에 별칭을 부여해서 여러 사용자가 
        각각의 이름으로 하나의 테이블을 사용하도록 하는 것.
        
        즉, 실제 객체(테이블, 뷰, 시퀀스, 프로시저) 이름은 감추고
        사용자에게 만들어진 별칭을 이용하게해서
        객체를 보호할 수 있도록 하는 방법
        
        우리가 포털사이트에서 우리의 이름 대신에 ID를 사용하는 것과 
        마찬가지로 정보 보호를 목적으로 실제 이름을 감추기 위한 방법
        
        
        주로 다른 계정을 사용하는 사용자가
        테이블 이름을 알면 곤란하기 때문에
        이들에게는 거짓 테이블 이름을 알려줘서
        실제 테이블 이름을 감추기 위한 목적으로 사용.
        
        ------------------------------------------------------------
        참고 ]
            우리 수업에서 사용하는 범위의 기호
                ()  - 소괄호, 매개변수, 연산단위를 묶는 경우
                
                {}  - 중괄호, 블럭을 의미, 실제 실행되어야 할 코드들이 작성되는 곳.
                
                []  - 대괄호, 배열을 의미, 형식 설명시 생략해도 무방한 것을 의미
                
        ------------------------------------------------------------
        
        형식 ]
            CREATE  [ PULIC ] SYNONYM   동의어이름
            FOR     실제이름;
            
            [ PUBLIC ]  - 생략되면 이 동의어는 같은 계정에서만 사용하는 동의어가 된다.
                            ( 권한을 부여하면 다른 계정에서도 사용할 수는 있다.)
                            
                            이 키워드가 사용되면 자동적으로 다른 계정에서도 
                            이 동의어를 이용해서 테이블을 사용할 수 있게 된다.
                            
        ------------------------------------------------------------
        ==> system 계정으로 접속해서 작업
            
            GRANT create synonym TO hello;
        -------------------------------------------------------------
*/

CREATE SYNONYM sy01
FOR hr.employees;

SELECT
    *
FROM
    sy01
;

----------------------------------------------------------------------
/*
    PUBLIC 동의어 만들기
        
        ==> 모든 계정에서 특정 객체(테이블, 뷰, 시퀀스, ...)를 사용할 수 있도록 하는 것.
        
        참고 ]
            PUBLIC 동의어를 사용하기 위해서는
            해당 객체가 PUBLIC 사용 권한을 할당 받아야 한다.
            
    ----------------------------------------------------------------------------
    
    1. 
    system 계정으로 접속후 작업
        GRANT select ON scott.emp   TO public;
    
    또는
    scott 계정으로 접속 후 
        
        GRANT SELECT ON emp TO public;
        
    1-1.
        system 계정에서
        scott 계정에게 
        public synonym을 만들 수 있는 권한을 부여한다.
        
            GRANT CREATE PUBLIC SYNONYM TO scott;
            
            GRANT SELECT ON SCOTT.EMP TO hello;
            
    2. 
        1)
        system 계정으로 만드는 방법
        
        public 동의를 만들어준다.
        
        CREATE PUBLIC SYNONYM all_emp
        FOR scott.emp;
        
        2) scott 계정에서 만드는 방법
            CREATE PUBLIC SYNONYM all_emp
            FOR emp;
            
    3. test01 계정으로 접속 후
        
        select * from all_emp;
    ----------------------------------------------------------------------------
    
            
            
*/

select * from scott.emp;
