/*
    day09
    
    IDE Setting
        1. Eclipse IDE for Java Developers - 2020.06 버젼을 다운 받는다.
        2. 압축해제한다.
        3. ??\class\db\app 폴더 에 압축해제된 eclipse 폴더를 옮겨둔다.
        ４．　ｅｃｌｉｐｓｅ　를　실행시킨다．
        ５．　ｗｏｒｋｓｐａｃｅ　설정　창에서　경로를　ｃｌａｓｓ￦ｄｂ￦ｓｏｕｒｃｅ로　설정한다．
        ６．　ｗｉｎｄｏｗ　－－＞　ｓｈｏｗｖｉｅｗ　－－＞　ｏｒｔｈｅｒｓ　－－＞　Ｇｉｔ　－－＞　Ｇｉｔ　Ｒｅｐｏｓｉｔｏｒｙ
        
        ７．　ｇｉｔ　ｒｅｐｏｓｉｔｏｒｙ　창에　배경을　클릭하고
                깃허브　복사한　주소를　붙여넣기（ＣＴＲＬ　＋　Ｖ）　한다．
                
        ８．　추가할　때　로컬　저장경로　설정은
                ｃｌａｓｓ￦ｄｂ￦ｇｉｔ　폴더로　설정한다．
                
        ９．　저장소가　추가되면　트리를　펼쳐서
            　ｗｏｒｋｉｎｇ　ｔｒｅｅ　를　펼치고　
             ．ｇｉｔ폴더　아래에　있는　프로젝트　폴더를　선택한　후
             마우스오른쪽　버튼을　클릭하고
             ｉｍｐｏｒｔ　Ｐｒｏｊｅｃｔｓ　메뉴를　선택한다．
             
        １０．　작업　인코딩　설정은
                ｗｉｎｄｏｗ　－－＞　Ｐｒｅｐｅｒｅｎｃｅｓ　메뉴를　선택하고
                창의　오른쪽　상단의　ｇｅｎｅｒａｌ　메뉴를　펼치면
                맨　하단에　ｗｏｒｋｓｐａｃｅ　메뉴를　선택한다
                Ｔｅｘｔ　ｆｉｌｅ　ｅｎｃｏｄｉｎｇ　항목을　찾아서
                인코딩　방식을　ＵＴＦ８로　선택하고　
                ａｐｐｌｙ　버튼을　클릭한다．
                
        １１．　ｈｅｌｐ　메뉴를　클릭하고
                마켓플레이스　를　선택해서
                ｓｑｌ을　입력해서　검색하고
                ｓｑｌ　ｅｄｉｔｏｒ　을　찾아서　설치해준다．
                
                
                
    https://github.com/increpas-cls2/11gxe
    
--------------------------------------------------------------------------------------------------------------------------
코딩용 폰트 설치하기

consolas - 코딩용 폰트(영문)

d2coding        - 한글 영문 모두 처리해주는 폰트
나눔고딕코딩      - 이것도 설치하시면 좋습니다...

*/


select * from emp;

INSERT INTO
    comp(empno, ename)
VALUES(
    NULL, '마이콜'
);

----------------------------------------------------------------------------
/*
    DDL(Data Definition Language) 명령
    ==> 개체(테이블, 계정, 제약, 뷰, 프로그램, 함수, ...)를 다루는 명령
        ==> 실행하는 순간 데이터베이스에 적용이 된다.
            따라서
            이전에 실행했던 DML 명령이 있다면
            이 명령으로 인해서 데이터베이스에 적용이 된다.
*/

UPDATE
    comp
SET
    job = '모델'
WHERE
    empno = 7938
;

CREATE TABLE
    comp2
AS
    SELECT
        *
    FROM
        emp
;

UPDATE
    comp
SET
    job = NULL
WHERE
    empno = 7938
;

DROP TABLE comp2;

---------------------------------------------------------------------------------------------------------
/*
    참고 ]
        테이블 설계
            오라클은 정규화된 데이터를 기억하도록 하는 데이터베이스의 일종이다.
            
            정규화 데이터란??
            규칙(규격)이 정해진 데이터를 말한다.
            즉, 오라클은 어떤 데이터를 기억할지를 미리 정해놓고
            그 데이터에 한해서만 기억하도록 하는 데이터베이스이다.
            
            따라서 테이블을 만들때는 여러가지 규칙을 가지고(정규화 규칙)
            데이블에 들어갈 데이터를 결정해야 한다.
            
            종류 ]
                논리적 설계
                ==> 개념스키마
                    필요한 테이블을 정리하는 것.
                    어떤 개체의 어떤 속성들을 저장할것인지.
                    개체와 개체의 관계
                    개체의 속성들의 제약조건...
                    
                결과물 ]
                    ER Model    - 개체의 속성과 개체간의 관계를 다이어 그램으로 작성한 것.
                    ER Diagram  - ER Model 에서 도출된 속성들과 개체들의 관계를 
                                  표 형식으로 작성한 것.
                                  
                    ==> 두가지를 합쳐서 ERD 라 부른다.
                    
                물리적 설계
                ==> 논리적 설계를 바탕으로 나온 결과(개념스키마)를 
                    데이터베이스에 물리적으로 적용되도록 만들어 내는것.
                    
                    개체의 이름, 개체가 가지는 속성들의 물리적 이름(컬럼이름 또는 필드이름),
                    속성의 타입, 사이즈 등이 정의 된다.
                    
                    ==> 테이블 명세서, DDL 명령
                            테이블 명세서에는 실제 디스크에 기록될 테이블이름, 속성이름, 데이터 타입, 사이즈, 제약조건등이 정확하게 기술이 된다.
                            
                            
                        참고 ]
                            오라클에서 사용할 수 있는 데이터 형태
                                
                                1. 문자형
                                    CHAR        : 고정길이 문자형
                                                    
                                        형식 ]
                                            CHAR(최대길이)
                                            주의 ] 최대 길이는 2000 바이트 까지만 사용할 수 있다.
                                            
                                        참고 ]
                                            지정한 최대 길이 이상의 문자열이 입력되면 입력받지 못한다.
                                                    
                                    VARCHAR2    : 가변길이 문자형
                                        
                                        형식 1 ]
                                            VARCHAR2(최대길이)  ==> 최대길이가 입력할 수 있는 최대 바이트가 된다.
                                            
                                        형식 2 ]
                                            VARCHAR2(최대길이 CHAR) ==> 최대길이가 입력할 수 있는 최대 문자갯수
                                            
                                        참고 ]
                                            VARCHAR2 타입은 최대 4000바이트까지만 사용할 수 있다.
                                            
                                        참고 ]
                                            
                                            1KByte == 1024 Byte
                                            1MByte == 1024 KByte
                                            1GByte == 1024 MByte == 1024 * 1024 * 1024 Byte
                                            
                                    LONG        : 가변길이 문자형
                                        
                                        형식 ]
                                            LONG
                                            
                                            ==> 최대 길이는 2GByte 까지 사용할 수 있다.
                                    
                                    CLOB        : 가변길이 문자형
                                        형식 ]
                                            CLOB
                                            
                                        ==> 최대길이는 4GByte 까지 사용할 수 있다.
                                        
                                    
                                참고 ]
                                    처리 속도는 CHAR 가 더 빠르다.
                                    
                                2. 숫자형
                                    NUMBER
                                        
                                        형식 ]
                                            MUMBER(숫자1[, 숫자2])
                                            
                                            숫자1은 전체 자리를 의미한다.
                                            
                                            숫자2는 소수이하 자리수를 의미한다.
                                            
                                        참고 ]
                                            숫자1보다 큰 수는 입력받지 못한다.
                                            예 ]
                                                NO NUMBER(2)    ==> 100입력하지 못한다.
                                                
                                            숫자2보다 소수이하가 많으면 반올림해서 입력한다.
                                            
                                                HEIGHT NUMBER(5, 2)  ==> 185.2578 입력하면  ---> 185.26이 저장된다.
                                                
                                3. 날짜형
                                    
                                    DATE
                                        
                                        형식 ]
                                            DATE
                                            
                    참고 ]
                        데이터베이스에 따라 데이터 형태도 약간씩 달라진다.
                        요즘은 ANSI 데이터 형태라고 해서
                        모든 데이터베이스에 적용 가능한 공통 형태를 
                        ANSI 협회에서 제시하고 있다.
                        
                        참고로 우리가 사용하는 질의 명령문도
                        ANSI 협회에서 지정한 형식이다.
                        
        *****          
        정규화
            
            테이블을 설계할 때 속성들과 각 속성들이 가져야할 규칙등을 정해가는 과정
            테이블을 설계하는 과정을 정의해놓은 것.
            
            1. 제1정규화    ==> 제1정규형
                - 테이블의 속성은 원자값을 가져야 한다.
                    원자값이란 더이상 나눌수 없는 값을 의미한다.
                    
                    주소의 경우
                    도-시-구-동 등으로 나뉘는데
                    이 경우는 사용상 나누어서 사용하면 오히려 불편하므로 
                    통상적으로 나누는 작업은 하지 않는다.
                    
                    이와 비슷한 경우가
                    전화번호, 이름, 날짜,...
                    
            2. 제2정규화    ==> 제2정규형
                - 모든 소성은 기본키에 대해서 완전함수종속이어야 한다.
                
                    기본키의 경우 ER Model에서 표현할 때는 타원(속성)아래쪽에 라인을 그어서 표시한다.
                
                    완전함수 종속 : 
                                    Y = X + 1 = f(X)
                                     이 경우 x 에 3이라는 숫자를 넣으면 반드시 4가 나온다.
                                     그런데 4 라는 숫자는 위식에서 얻을려면 반드시 3이라는 숫자가 x에 입력되어야 나온다.
                                     
                                     따라서 우리가 하고있는 사원테이블에 적용시켜서 생각해보면
                                     사원번호(기본키)를 입력하면 반드시 해당 번호를 가지는 사원 한명만 꺼내와 진다.
                                     이 사원의 번호를 입력해서 다른 사원이 검색이 되면 절대로 안된다.
                    따라서 정리를 하자면
                    속성중 반드시 기본키가 존재해야 한다는 것이고
                    그 기본키를 정하는 정규화 과정이다.
                    
                    참고 ]
                        테이블에서 기본키는 한개만 가질 수 있다.
                        
                        유일하게 사용해야할 속성은 유일키 제약으로 표현한다.
                    
            3. 제3정규화    ==> 제3정규형
                
                ==> 모든 속성은 부분 함수 종속을 피해야 한다.
                    만약 부분함수 종속인 속성이 존재하면
                    테이블 분리해서 저장한다.
            
            ------------------------------------------------------------------
            4.  BCNF 정규화
            ......
            
            
            참고 ]
                정규화 과정은 제1정규화에서 부터 순차적으로 진행하면 되는데
                때에 따라서는 이전 과정으로 돌아서 다시 작업해야 되는 경우도 생긴다.
*/



/*

    1. 테이블 만들기
        
        형식 1 ]
            
            CREATE TABLE 테이블이름(
                컬럼이름    데이터타입(길이),
                컬럼이름    데이터타입(길이),
                ....
            );
            
        형식 2 ]
            -- 제약조건과 함께 테이블을 만드는 형식
            
            CREATE TABLE 테이블이름(
                컬럼이름 데이터타입(길이) [ DEFAULT 데이터 ]
                    CONSTRAINT 제약조건이름 제약조건부여형식
                    CONSTRAINT 제약조건이름 제약조건부여형식
                    ....,
                컬럼이름 데이터타입(길이) [ DEFAULT 데이터 ]
                    CONSTRAINT 제약조건이름 제약조건부여형식
                    CONSTRAINT 제약조건이름 제약조건부여형식,
                ...
            );
            
            
        참고 ]
            제약조건 이름 만드는 형식
                
                테이블이름_필드이름_제약조건약자
                
                예 ]
                    칼라테이블의 칼라번호의 기본키 제약조건 이름
                    
                    KCLR_NO_PK  -- 기본키
                    KCLR_NO_FK  -- 외래키, 참조키, FOREIGN KEY
                    KCLR_NO_NN  -- NOT NULL
                    KCLR_NO_UK  -- UNIQUE
                    KCLR_NO_CK  -- CHECK
                    
            참고 ]
                제약조건 이름은 오라클에 저장되어서 관리가 된다.
                따라서 동일한 이름의 제약조건이 만들어지면 절대로 안된다.
                    
                    
*/

-- 칼라코드를 기억할 테이블을 만들자.
-- 칼라는 기본키는 칼라번호를 사용하기로 한다.
-- 속성은 칼라이름, RGB 코드 를 기억시킨다.

/*
    Red
    Green
    Blue
    
    RGB CODE
    0 ~ 255 : 256개의 숫자로 각 칼라의 코드값을 만들어서 세개를 같이 사용해서 색상을 표현한다.
    
    형식 ]
        RRR, GGG, BBB
        
        0, 0, 255 : BLUE
        0, 255, 0 : GREEN
        255, 0, 0 : RED
        
        우리의 경우 
            빨강의 경우 : 255,000,000
        의 형식으로 저정하기로 한다.( CHAR(11) )
*/

CREATE TABLE kcolor(
    kcno NUMBER(4),
    kcname VARCHAR2(10 CHAR),
    rgb_code CHAR(11)
);

/*
     DROP : 개체를 삭제하는 명령
     
        형식 ]
            
            DROP 개체타입 개체이름;
*/

DROP TABLE kcolor;

-- 제약조건과 함께 테이블 만들기
CREATE TABLE kcolor(
    kcno NUMBER(4)
        CONSTRAINT KCLR_NO_PK PRIMARY KEY,
    kcname VARCHAR2(10 CHAR)
        CONSTRAINT KCLR_NAME_NN NOT NULL,
    rgb_code CHAR(11)
        CONSTRAINT KCLR_CODE_UK UNIQUE
        CONSTRAINT KCLR_CODE_NN NOT NULL
);

-- 빨강, 파랑, 초록 색상 데이터를 추가해보자.

INSERT INTO
    kcolor
VALUES(
    (SELECT NVL(MAX(kcno) + 1, 1001) FROM kcolor),
    '빨강', '255,000,000'
);

INSERT INTO
    kcolor
VALUES(
    (SELECT NVL(MAX(kcno) + 1, 1001) FROM kcolor),
    '파랑', '000,000,255'
);

INSERT INTO
    kcolor
VALUES(
    (SELECT NVL(MAX(kcno) + 1, 1001) FROM kcolor),
    '초록', '000,255,000'
);

commit;

---------------------------------------------------------
/*
    숙제 ]
        영문 칼라 정보를 기억할 테이블을 만들 예정이다.
            ER Model, ER Digram, 테이블 명세서, DDL 질의명령을 작성하세요.
            
        작성 순서 ]
            1. ER Model
            2. ER Diagram
            3. 테이블 명세서
            4. DDL 질의 명령
            
        순으로 작성하세요...
*/
