-- day03

/*
    sqlplus 로 접속하는 방법
        ==> 오라클을 설치할 때 오라클에서 접속용 프로그램을 기본적으로
            만들어서 제공해주고 있는데 
            그 프로그램이 sqlplus 이다.
            이 프로그램은 CLI(윈도우의 경우 cmd창)에서 
            명령을 전달 하는 프로그램이다.
            
        명령 ]
            
            1. 접속 ==> sqlplus 계정이름/비밀번호@서버주소:포트번호/SID
                우리가 sqlplus 계정이름/비밀번호
                로 접근하는 경우는 
                현재 실행중인 컴퓨터에 설치되어있는 오라클에 해당계정으로 
                접속하게 된다.
                
                참고 ]
                    접속에 성공하게 되면 
                    커서가 
                        SQL>
                    의 형태로 경로가 보이고 그다음에 커서가 점등된다.
                
                    이 상태가 sqlplus 프로그램이 실행이 되고 있는 상태이고
                    현재 sqlplus 프로그램을 통해서 작업을 하고있는 상태가 된다.
                    
            2. 접속 해제방법
                반드시 exit명령으로 sqlplus 프로그램의 실행을 종료해야 한다.
                만약 강제로 cmd(terminal) 창을 닫게 되면
                이전까지 작업했던 내용은 모두 적용이 안되고
                큰 문제는 사용하던 계정이 잠길수 있다.
                
                따라서 sqlplus 에서 작업을 할 경우는 반드시 
                작업이 완료된 이후 프로그램을 정상 종료시켜야 한다.
                이때 사용하는 명령이 exit 명령이다.
                이명령역시 sqlplus 에 포함되어있는 명령이다.
                
            3. 출력되는 글자수와 라인수를 수정하는 방법
                
                ==>
                set pagesize 라인수
                
                한행에 표시할 문자수 
                ==>
                set linesize 문자갯수
                
            참고 ]
                sqlplus 명령에서 적용한 설정은
                현 세션에서만 유효하고
                세션이 다시 열리면 기본값으로 초기화가 된다.
            
            참고 ]
                sqlplus 명령은 명령이 끝났다는 표시를 해주지 않아도 된다.
                ; 이 필요없다.
    sqldeveloper로 접속하는 방법
*/

/*
    cRud 중 R(SELECT) 명령
    : 데이터를 조회하는 명령
    
    기본형식 ]
        
        SELECT
            조회할 컬럼이름들..
        FROM
            데이터가 있는 테이블 이름
        ;
*/

-- emp테이블에서 사원번호, 사원이름, 부서번호를 조회하세요.
SELECT
    empno, ename, deptno
FROM
    emp
;

-- 문제 ] emp 테이블에서 사원들의 사원이름, 입사일, 급여 를 조회하세요. 
SELECT
    ename, hiredate, sal
FROM
    emp
;

/*
    emp테이블 구조 복습
        
        empno       - 사원번호
        ename       - 사원이름
        job         - 사원직급(직책)
        mgr         - 상사번호(상사의 사원번호)
        hiredate    - 입사일
        sal         - 급여
        comm        - 커미션
        deptno      - 부서번호
*/

-- 부서번호만 조회해보자.
SELECT
    deptno
FROM
    emp
;

-- 부서번호를 조회하는데 
-- 중복된 번호는 한번만 표현되도록 질의명령을 작성하세요.
SELECT
    DISTINCT deptno
FROM
    emp
;
/*
    DISTINCT 
     : 조회결과 같은 데이터는 한번만 출력되도록 하는 명령

    주의 ]
        이 명령은 데이터가 같은 경우만 한번만 출력하게 된다.
        따라서 사원이름, 사원직급을 조회하는 경우는 
        
        데이터 한개는 사원이름, 사원직급을 의미하므로
        모든 사원이 조회되게 된다.
        
        그리고 이 명령은 select 절에 맨 앞에 한번만 사용할 수 있다.
*/

-- 사원들의 직급(job)을 조회하는데
-- 중복된 직급은 한번만 출력되도록 하세요.
SELECT
    DISTINCT job
FROM
    emp
;

-- 사원들의 사원이름(ename),직급(job)을 조회하는데
-- 중복된 직급은 한번만 출력되도록 하세요.
SELECT
    DISTINCT ename, job
FROM
    emp
;

-- 사원들의 직급과 부서번호를 조회하는데
-- 중복된 결과는 한번만 출력되도록 질의명령을 작성하세요.
SELECT
    DISTINCT job, deptno
FROM
    emp
;

/*
    참고 ]
        조회 질의명령에서 필드이름을 나열할 때
        모든 필드를 조회할 경우에는 
            *
        를 사용해서 조회하면 되는데
        이 형식은 실무에서는 사용하지 않는 방법이다.
        
*/

SELECT
    *
FROM
    emp
; -- 사원정보 테이블의 모든 정보를 조회하세요. 라는 의미

/*
    질의 명령 안에는 연산식을 포함할 수 있다.
    이때 표현되는 경과는 연산된 결과가 표현된다.
    
    연산자
        - 계산에 사용되는 기호
        
        +   : 더하기
        -   : 빼기
        *   : 곱하기
        /   : 나누기
        
        참고 ]
        ||  : 문자열을 결합하는 연산자.
*/
-- 모든 사원들의 사원이름, 연봉(급여 * 12)을 조회하세요.
SELECT
    ename, sal, sal * 12
FROM
    emp
;

-- 문제 ] 사원들의 사원이름, 급여, 인상급여를 조회하세요.
-- 인상급여는 이전급에서 10% 인상한 급여이다.
SELECT
    ename, sal, sal + (sal * 0.1), sal * 1.1
FROM
    emp
;

/*
    문자열 결합 : || 연산자를 사용해서 결합한다.
*/
-- 사원들의 사원  이름, 급  여를 조회하는데...
-- 사원이름은 ##### 사원 의 형식으로 출력되게 하세요...

-- SMITH 사원의 경우 이름은 문자열이다.
-- 그리고 뒤에 붙는 ' 사원' 이라는 데이터도 문자열이다. 
-- 따라서 두 문자열을 결합하면 된다.

SELECT 
    ename || ' 사원', sal
FROM
    emp
;

-- 별칭 부여
SELECT 
    ename || ' 사원' AS "사원   이름", sal "급  여"
FROM
    emp
;

-- 모든사워들에서 '사원' 이라는 문자열을 조회해보자.
SELECT
    '사원'
FROM
    emp
;

/*
    참고 ]
        오라클에서 문자열을 표현할 때는 
        작은 따옴표('') 를 사용해서 표현한다.
*/

SELECT
    ename, ' 사원', ename || ' 사원'
FROM
    emp
;

/*
    별칭 주기 : 
        별칭이란 필드이름이나 계산식을 조회할 경우
        표시되는 필드이름이 길어지게 되는 경우가 생긴다.
        이때 그 길어진 계산식이나 원래의 필드이름 대신에 사용하는 이름을 의미한다.
        
        주는 방법 ]
            
            1. 별칭에 공백이 없는 경우
            
                필드이름(계산식)   별칭이름
                또는
                필드이름(계산식)   AS  별칭이름
                
            2. 별칭에 공백이 있는 경우
                필드이름(계산식)   "별칭 이름"
                또는
                필드이름(계산식)   AS  "별칭 이름"
*/

SELECT
    ename 사원, ' 사원' "문 자 열", ename || ' 사원' as "결   과"
FROM
    emp
;

/*
    문제 1 ]
        emp테이블에 있는 사원이름(ename)과 부서번호(deptno)을 조회하세요.
        
        단, 필드이름은 별칭으로 표시되게 하세요.
*/

SELECT
    ename 사원이름, deptno 부서번호
FROM
    emp
;

/*
    문제 2 ]
        emp테이블에 있는 부서번호(deptno)을 조회하세요.
        단, 중복된 부서번호는 한번만 출려되게 하고
        필드이름은 별칭으로 표시되게 하세요.
*/

SELECT
    DISTINCT deptno 부서번호
FROM
    emp
;

/*
    문제 3 ]
        emp테이블에 있는 사원이름(ename)과 입사일을 조회하세요.
        단, 필드이름은 별칭으로 표시되게 하세요.
*/

SELECT
    ename 사원이름, hiredate 입사일
FROM
    emp
;

/*
    참고 ]
        데이터 타입
        
        오라클에서 데이터를 기억할 때 사용하는 타입
        
        문자
            :  문자를 기억하기 위해서 만들어진 타입
               주의할 점은 문자와 문자열을 모두 관리한다.
            
            CHAR        - 고정길이 문자 데이터 타입
            
            VARCHAR2    - 가변길이 문자 데이터 타입
            
        숫자
            : 숫자를 관리하기 위해서 만들어진 타입
            
            NUMBER - 실수 정수 모두를 관리한다.
                     32자리까지 기억할 수 있다.
        
        날짜 
            : 날짜데이터를 관리하기 위해서 만들어진 타입
            
            DATE - 1970년 1월 1일 0시 0분 0초를 기준으로 만들어진다.
*/

/*
    중요 ]
        
        오라클에서는 명령어, 함수, 연산자,테이블이름, 필드이름 등은
        대소문자를 구분하지 않는다.
        
        단, 문자데이터 자체는 대소문자를 구분해서 사용해야 한다.
*/

select
    ename
from
    emp
;

SELECT
    ENAME
FROM
    EMP
;

SELECT
    *
FROM
    emp
where
--    'A' = 'A' -- > false
    ENAME = 'SMITH'
;

/*
    문제 4 ]
        emp테이블에 있는 사원이름(ename)과 직급(job) 그리고 급여를 조회하세요.
        단, 급여는 15% 인상된 급여가 출력되게 하고
        필드이름은 별칭으로 표시되게 하세요.
*/

SELECT
    ename 사원이름, job 직급, sal * 1.15 급여
FROM
    emp
;


/*
    문제 5 ]
        emp테이블에 있는 사원번호(empno),사원이름(ename)과 부서번호(deptno)을 조회하세요.
        
        단, 사원이름은 SMITH 사원의 경우 Mr.SMITH 의 형식으로 출력되게 하고
        부서번호는 10번 부서원의 경우 "10번 부서" 의 형식으로 출력되게 하세요.
        필드이름은 별칭으로 표시되게 하세요.
*/

SELECT
    empno 사원번호,
    'Mr.' || ename 사원이름,
    deptno || '번 부서' 부서번호
FROM
    emp
;


-- 사원의 이름, 입사일을 조회하세요.
SELECT
    ename 사원이름, hiredate 입사일
FROM
    emp
;

------------------------------------------------------------------------------
-- SCOTT의 입사일을 '1987/07/13 일로 변경하자.

UPDATE -- DML소속의 명령
    emp
SET
   hiredate = TO_DATE('1987/07/13', 'yyyy/MM/dd') -- = : 대입 연산자
WHERE
    ename = 'SCOTT'
;

commit;


-------------------------------------------------------------------------------
/*
    참고 ]
        NULL데이터
        ==> 필드안에는 데이터가 보관되어야 하는데...
            만약 없는 정보는 데이터가 없을수 있다.
            이처럼 필드안에 데이터가 없는 상태를 NULL데이터라 이야기 한다.
            
            *****
            NULL데이터는 모든 연산에서 제외가 된다.
            
            이런 문제점을 해결하도록 오라클에서는 
            NULL데이터 처리용 함수를 제공해주고 있다.
            
            *******
            NVL(컬럼 또는 연산식, NULL일경우 대체해줄 데이터)
            
            NVL2(컬럼이름, 연산식, 대체데이터)
*/
SELECT * FROM EMP;

-- 사원들의 커미션을 50을 더해서 조회하세요.
-- 단, 커미션이 없는 사원은 30을 지급하도록 하세요.
SELECT
    ename 사원이름, comm 이전커미션, comm + 50 그냥지급커미션, NVL(comm + 50, 30) 확정지급커미션
FROM
    emp
;

SELECT
    ename 사원이름, comm 이전커미션, comm + 50 그냥지급커미션, 
    NVL2(comm, comm + 50, 30) 확정지급커미션,
    NVL(ename) 직원 -- ==>   인수의 개수가 부적합합니다. = 입력해줘야 할 데이터의 갯수가 부족하다.
    -- 인수 = 매개변수, 파라미터(parameter)
FROM
    emp
;

/*
    NVL2() 함수
    - 이 함수 역시 널데이터 처리용 함수
    
    형식 ]
        NVL2(필드이름, 연산식, 결과가 널인경우 대체데이터)
    
*/


/*
    f(x) = x + 2
    
    f() = 10 + 2
    
    function ===> f 기능.
*/

-------------------------------------------------------------------------------

/*
    emp 테이블에 있는 사원들의 
    사원이름, 급여, 커미션, 지급 커미션, 연봉을 조회하세요.
    연봉은 급여 * 12 + 커미션으로 계산하고
    커미션이 없는 사원은 커미션을 0으로 계산하고
    커미션이 있는 사원은 기존커미션에 50을 더해서 계산하세요.
*/

-- 1.
SELECT
    ename 사원이름, sal 급여, comm 커미션, 
    NVL(comm + 50, 0) "지급 커미션", 
    sal * 12 + NVL(comm + 50, 0) 연봉
FROM
    emp
;

SELECT
    ename 사원이름, sal 급여, comm 커미션, 
    NVL2(comm, comm + 50, 0) "지급 커미션", 
    sal * 12 + NVL2(comm, comm + 50, 0) 연봉
FROM
    emp
;

SELECT
    ename 사원이름, sal 급여, comm 커미션, 
    NVL(comm + 50, 0) "지급 커미션", 
    sal * 12 + NVL(comm + 50, 0) 연봉1,
    NVL(sal * 12 + comm + 50, sal * 12)  연봉
FROM
    emp
;

SELECT
    ename 사원이름, sal 급여, comm 커미션, 
    NVL(comm + 50, 0) "지급 커미션", 
    sal * 12 + NVL(comm + 50, 0) 연봉1,
    NVL2(comm, sal * 12 + comm + 50, sal * 12)  연봉
FROM
    emp
;

------------------------------------------------------------------------

/*
    SELECT 명령 형식 2]
    - 조건을 부여하고 조건 맞는 데이터만 조회하는 형식
    
    형식 ]
        
        SELECT
            필드이름들....
        FROM
            테이블 이름
        WHERE
            조건식
        ;
        
        참고 ]
            조건이 여러개인 경우는 
            AND 또는 OR
            를 붙여서 나열하면 된다.
*/

-- 부서번호가 10번 부서원들의 데이터를 조회하세요.
SELECT
    *
FROM
    emp
WHERE
    deptno = 10 -- 비교연산자...
;

/*
    *****
    참고 ]
        연산자
        
        산술 연산자 - 산술 연산에 사용되는 기호
            +, -, *, /
        
        비교연산자(조건연산자) - 비교 연산을 할 때 사용되는 기호
            
            =   : 같은지
            <>, !=  : 다른지  
            >   : 큰지
            <   : 작은지
            >=  : 크거나 같은지
            <=  : 작거나 같은지
            
            NOT, ! : 부정 연산자
            
            범위 연산자
                field BETWEEN a AND b
                ==> field가 a에서 b사이 값이니???
                ==> 
                    field >= a
                    AND field <= b
        
        논리 연산자
                    
                    a       b
                
            AND - 두값이 모두 참(true) 인 경우만 참(true)
                
            OR  - 두 값중 하나만 참(true)이면 참(true)
                    두 값이 모두 거짓(false)인 경우는 거짓(false)이다.
                
*/

-- 급여가 1200에서 1500 사이인 사원의 사원이름, 급여를 조회하세요.
SELECT
    ename, sal
FROM
    emp
WHERE
    sal BETWEEN 1200 AND 1500
;

SELECT
    ename, sal
FROM
    emp
WHERE
    sal >= 1200 
    AND sal <= 1500
;

------------------------------------------------------
/*
    참고 ]
        오라클은 데이터의 형태를 매우 중요시한다.
        원칙적으로 문자는 문자끼리만 비교할 수 있다.
        역시 숫자도 숫자끼리만 비교할 수 있다.
        단, 예외가 하나 있는데
        날짜는 문자처럼 비교할 수 있다.
*/

-- 입사일이 1982년 이후인 사원의 정보를 조회하세요.
SELECT
    *
FROM
    emp
WHERE
    hiredate > '1982/01/01'
;
/*
    이 경우는 날짜와 문자를 비교하는 것이 아니고
    문자데이터를 날짜데이터로 변환시켜주는 
    함수(TO_DATE())를 오라클이 자동 호출해서
    날짜데이터로 변환후 비교하게 된다.
    
*/

/*
    문자데이터도 크기비교가 가능하다.
    이때는 ASCII코드값을 사용해서 비교하게 된다.
    따라서
        'A' < 'B'
*/

-- 사원의 이름이 M이후의 문자로 시작하는 사원의 이름을 조회하세요.
SELECT
    ename
FROM
    emp
WHERE
    ename > 'M' -- 참고 ] 'M' < 'MA'
;

-- 사원의 이름이 'A'로 시작하는 사원의 사원이름을 조회하세요.
SELECT
    ename
FROM
    emp
WHERE
    ename >= 'A'
    AND ename < 'B'
;

-- NOT 연산자 : 부정 연산자
-- 부서번호가 10번이 아닌 사원의 사원이름, 직책, 부서번호를 조회하세요.

SELECT
    ename 사원이름, job 직책, deptno 부서번호
FROM
    emp
WHERE
    not deptno <> 10
--    deptno != 10
;

/*
    
    **********
    NUll 데이터는 모든 연산에서 제외가 된다.
    따라서 비교연산에서도 연산을 수행하지 않는다.
    연산결과 NULL로 표현된다.
    
    따라서 NULL데이터의 비교는 연사자를 따로 만들어서 제공해주고 있다.
        
        IS NULL     - 널이면 true
        IS NOT NULL - 널이 아니면 true
    
*/

-- 커미션이 없는 사원들의 사원이름, 부서번호, 커미션을 조회하세요.
SELECT
    ename 사원이름, deptno 부서번호, comm 커미션
FROM
    emp
WHERE
    comm IS NULL
    -- where 절내의 연산결과는 반드시 true 또는 false 만 발생되어야 한다.
;

/*
    범위 비교 연산자
        BETWEEN A AND B
        
    다중값 비교 연산자
        대상 IN (데이터1, 데이터2,...)
        ==> 대상이 데이터1이거나 데이터2이거나 .... 인경우는 true
*/

-- 부서번호가 20, 30번인 사원들의 사원이름, 직급, 부서번호를 조회하세요.
SELECT
    ename, job, deptno
FROM
    emp
WHERE
    deptno = 20
    OR deptno = 30
;

SELECT
    ename, job, deptno
FROM
    emp
WHERE
    NOT deptno IN (20, 30)
;

-- 직책이 'CLERK' 또는 'SALESMAN'인 사원들의 사원번호, 사원이름, 직책, 급여를 조회하세요.
SELECT
    empno, ename, job, sal
FROM
    emp
WHERE
    job IN ('CLERK', 'SALESMAN')
;

--------------------------------------------------------------------------------

/*
    LIKE 연산자 - 문자열 비교연산자
    
    문자열을 처리하는 경우에만 사용하는 방법으로
    문자열의 일부분을 와일드 카드 처리하여
    조건시을 제시하는 방법
    
    형식 ]
        
        필드이름(또는 데이터) LIKE '와일드카드 포함 문자열'
    
    의미 ]
        필드의 데이터가 지정한 문자열과 동일한지를 판단한다.
        
    참고 ]
        와일드 카드 사용법
        
            _   : 한개당 한글자만 와일드 카드로 지정하는 것.
            %   :글자수에 관계없이 모든 문자를 포함하는 와일드 카드
            
            
        예 ]
            'M%'        ==> M으로 시작하는 모든 문자열. 'M'도 포함된다.
                            %는 0개 이상의 문자열을 의미
            
        예 2]
            'M_____'    ==> M으로 시작하고 글자수가 6개인 문자열
            
        예 3]
            '%M'        ==> M으로 끝나는 모든 문자열. 'M'도 포함된다.
*/

-- 사원이름이 5글자인 사람의 이름, 직급을 조회하세요.

SELECT
    ename, job
FROM
    emp
WHERE
    ename LIKE '_____'
;

-- > 문자열 처리함수를 사용해서 처리하는 방법
SELECT
    ename, job
FROM
    emp
WHERE
    LENGTH(ename) = 5
;

-- 이름의 두번째 문자가 'A'인 사원의 사원이름, 직급을 조회하세요.
SELECT
    ename, job
FROM
    emp
WHERE
    ename LIKE '_A%'
;

-- 문제 ] 입사월이 1월인 사원의 사원번호, 사원이름, 입사일을 조회하세요.
SELECT
    empno, ename, hiredate
FROM
    emp
WHERE
    hiredate LIKE '____/01%'
;

SELECT
    empno, ename, hiredate
FROM
    emp
WHERE
    TO_CHAR(hiredate, 'yyyy/MM/dd') LIKE '_____01%'
;

-- 문자열 변환함수로 처리하는 방법
SELECT
    empno, ename, hiredate
FROM
    emp
WHERE
    TO_CHAR(hiredate, 'MM') = '01'
;


















